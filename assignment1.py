# -*- coding: utf-8 -*-
"""ASSIGNMENT1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QRMtWEjApcU0BWjjZrZ31EDjDRrPtFuR
"""

import logging
import pandas as pd
import numpy as np
from numpy import random
import gensim
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
import re
from bs4 import BeautifulSoup
url="https://storage.googleapis.com/tensorflow-workshop-examples/stack-overflow-data.csv"
df = pd.read_csv(url)
df = df[pd.notnull(df['tags'])]
print(df.head(10))
print(df['post'].apply(lambda x: len(x.split(' '))).sum())

my_tags = ['java','html','asp.net','c#','ruby-on-rails','jquery','mysql','php','ios','javascript','python','c','css','android','iphone','sql','objective-c','c++','angularjs','.net']
plt.figure(figsize=(10,4))
df.tags.value_counts().plot(kind='bar')

def print_plot(index):
    example = df[df.index == index][['post', 'tags']].values[0]
    if len(example) > 0:
        print(example[0])
        print('Tag:', example[1])

print_plot(10)

import nltk
nltk.download('stopwords')

REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;]')
BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))

def clean_text(text):
    """
        text: a string
        
        return: modified initial string
    """
    text = BeautifulSoup(text, "lxml").text # HTML decoding
    text = text.lower() # lowercase text
    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text
    text = BAD_SYMBOLS_RE.sub('', text) # delete symbols which are in BAD_SYMBOLS_RE from text
    text = ' '.join(word for word in text.split() if word not in STOPWORDS) # delete stopwors from text
    return text
    
df['post'] = df['post'].apply(clean_text)



X = df.post
y = df.tags
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)

from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics import classification_report
from sklearn import metrics
from sklearn import svm

cv = CountVectorizer(lowercase=True,stop_words='english',ngram_range = (1,1))
tf_train=cv.fit_transform(X_train)
tf_test=cv.transform(X_test)

clf = MultinomialNB().fit(tf_train, y_train)
y_pred= clf.predict(tf_test)
print(y_pred)
print("MultinomialNB Accuracy Using Unigram:",metrics.accuracy_score(y_test,y_pred))
print(classification_report(y_test, y_pred))



cv = CountVectorizer(lowercase=True,stop_words='english',ngram_range = (2,2))
X = df.post
y = df.tags
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics import classification_report
from sklearn import metrics

tf_train=cv.fit_transform(X_train)
tf_test=cv.transform(X_test)

clf = MultinomialNB().fit(tf_train, y_train)
predicted= clf.predict(tf_test)
print(predicted)
print("MultinomialNB Accuracy Using Bigram:",metrics.accuracy_score(y_test, predicted))
print(classification_report(y_test, predicted))



cv = CountVectorizer(lowercase=True,stop_words='english',ngram_range = (3,3))
X = df.post
y = df.tags
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics import classification_report
from sklearn import metrics

tf_train=cv.fit_transform(X_train)
tf_test=cv.transform(X_test)

clf = MultinomialNB().fit(tf_train, y_train)
predicted= clf.predict(tf_test)
print(predicted)
print("MultinomialNB Accuracy Using Trigram:",metrics.accuracy_score(y_test, predicted))
print(classification_report(y_test, predicted))



from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics import classification_report
from sklearn import metrics
from sklearn import svm

cv = TfidfVectorizer(lowercase=True,stop_words='english',ngram_range = (1,1))
tf_train=cv.fit_transform(X_train)
tf_test=cv.transform(X_test)

clf = MultinomialNB().fit(tf_train, y_train)
y_pred= clf.predict(tf_test)
print(y_pred)
print("MultinomialNB Accuracy Using Unigram:",metrics.accuracy_score(y_test,y_pred))
print(classification_report(y_test, y_pred))

cv = TfidfVectorizer(lowercase=True,stop_words='english',ngram_range = (2,2))
X = df.post
y = df.tags
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics import classification_report
from sklearn import metrics

tf_train=cv.fit_transform(X_train)
tf_test=cv.transform(X_test)

clf = MultinomialNB().fit(tf_train, y_train)
predicted= clf.predict(tf_test)
print(predicted)
print("MultinomialNB Accuracy Using Bigram:",metrics.accuracy_score(y_test, predicted))
print(classification_report(y_test, predicted))

cv = TfidfVectorizer(lowercase=True,stop_words='english',ngram_range = (3,3))
X = df.post
y = df.tags
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics import classification_report
from sklearn import metrics

tf_train=cv.fit_transform(X_train)
tf_test=cv.transform(X_test)

clf = MultinomialNB().fit(tf_train, y_train)
predicted= clf.predict(tf_test)
print(predicted)
print("MultinomialNB Accuracy Using Trigram:",metrics.accuracy_score(y_test, predicted))
print(classification_report(y_test, predicted))